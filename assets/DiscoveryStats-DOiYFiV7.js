import{d as H,u as I,s as E,r as R,c as f,g as re,a as X,w as J,o as w,b as Q,e as L,f as B,h as n,i as le,Q as K,j,k as T,p as oe,l as ne,t as ie,m as a,n as O,q as i,F as q,v as de,x as ce,z as ue,A as me,B as ge,_ as G}from"./index-Bmm1GbGh.js";import{r as ve}from"./index-0QCZORAL.js";const b=(e,a,l=1)=>parseFloat((a?e/a*100:0).toFixed(l)),$=e=>`${e}%`,fe=H({__name:"DiscovererStats",setup(e){const a=I(),{filteredData:l,dataLength:t,amountTagged:s}=E(a),r=R(null),o=R({sortBy:"discoveries",descending:!0,page:1,rowsPerPage:10}),i=f((()=>{var e;const a={};for(let r=0;r<l.value.length;r++){const n=l.value[r];if(!n.Discoverer)continue;const o=a[e=n.Discoverer]??(a[e]={platform:"",discoveries:0,systems:0,discPercent:0,tagged:0,taggedPercent:0,taggedPercentSelf:0});o.discoveries++,"SolarSystem"===n.Category&&o.systems++,n["Correctly Prefixed"]&&o.tagged++,o.platform||(o.platform=re(n.Platform)),o.discPercent=b(o.discoveries,t.value),o.taggedPercent=b(o.tagged,s.value),o.taggedPercentSelf=b(o.tagged,o.systems)}return Object.entries(a).map((([e,a])=>({discoverer:e,...a})))})),d=R([]),u=X([{name:"pos",label:"Pos.",align:"left",field:e=>`${d.value.indexOf(e)+1}.`},{name:"name",label:"Name",align:"left",field:"discoverer",sortable:!0},{name:"platform",label:"Platform",align:"left",field:"platform",sortable:!0},{name:"discoveries",label:"Discoveries",align:"left",field:"discoveries",sortable:!0},{name:"discPercent",label:"Discoveries %",align:"left",field:"discPercent",format:$,sortable:!0},{name:"tagged",label:"Tagged",align:"left",field:"tagged",sortable:!0},{name:"taggedPercent",label:"Tagged % of Total",align:"left",field:"taggedPercent",format:$,sortable:!0},{name:"taggedPercentSelf",label:"Tag Rate",align:"left",field:"taggedPercentSelf",format:$,sortable:!0}]);J((()=>{var e;if(!o.value.sortBy)return;const a=null==(e=r.value)?void 0:e.filteredSortedRows;o.value.descending?d.value=a?[...a]:[]:d.value=a?[...a.toReversed()]:[]}));const v=f((()=>l.value.some((e=>"SolarSystem"===e.Category)))),c=u.slice(0,-3);return(e,a)=>i.value.length?(w(),Q(j,{key:0,label:"Discoverer Stats","default-opened":""},{default:L((()=>[B(K,{pagination:o.value,"onUpdate:pagination":a[0]||(a[0]=e=>o.value=e),columns:v.value?u:n(c),rows:i.value,"rows-per-page-options":n(le),class:"q-px-md","column-sort-order":"da",ref_key:"discovererTable",ref:r,"table-header-class":"table-header","binary-state-sort":"",flat:""},null,8,["pagination","columns","rows","rows-per-page-options"])])),_:1})):T("",!0)}}),ye=H({__name:"PlatformStats",setup(e){const a=I(),{filteredData:l,dataLength:t,amountTagged:s}=E(a),r=R(null),o=R({sortBy:"discoveries",descending:!0,page:1,rowsPerPage:0}),i=f((()=>{const e={Steam:new Set,PlayStation:new Set,Xbox:new Set,GOG:new Set,"Nintendo Switch":new Set},a={};for(let r=0;r<l.value.length;r++){const n=l.value[r];if(!n.Platform)continue;const o=oe[n.Platform].label,i=a[o]??(a[o]={players:0,discoveries:0,discPercent:0,systems:0,tagged:0,taggedPercent:0,taggedPercentSelf:0});i.discoveries++,"SolarSystem"===n.Category&&i.systems++,n["Correctly Prefixed"]&&i.tagged++,e[o].add(n.Discoverer),i.players=e[o].size,i.discPercent=b(i.discoveries,t.value),i.taggedPercent=b(i.tagged,s.value),i.taggedPercentSelf=b(i.tagged,i.systems)}return Object.entries(a).map((([e,a])=>({platform:e,...a})))})),d=R([]),u=X([{name:"pos",label:"Pos.",align:"left",field:e=>`${d.value.indexOf(e)+1}.`},{name:"platform",label:"Platform",align:"left",field:"platform",sortable:!0},{name:"players",label:"Players",align:"left",field:"players",sortable:!0},{name:"discoveries",label:"Discoveries",align:"left",field:"discoveries",sortable:!0},{name:"discPercent",label:"Discoveries %",align:"left",field:"discPercent",format:$,sortable:!0},{name:"tagged",label:"Tagged",align:"left",field:"tagged",sortable:!0},{name:"taggedPercent",label:"Tagged % of Total",align:"left",field:"taggedPercent",format:$,sortable:!0},{name:"taggedPercentSelf",label:"Tag Rate",align:"left",field:"taggedPercentSelf",format:$,sortable:!0}]);J((()=>{var e;if(!o.value.sortBy)return;const a=null==(e=r.value)?void 0:e.filteredSortedRows;o.value.descending?d.value=a?[...a]:[]:d.value=a?[...a.toReversed()]:[]}));const v=f((()=>l.value.some((e=>"SolarSystem"===e.Category)))),c=u.slice(0,-3);return(e,a)=>i.value.length?(w(),Q(j,{key:0,label:"Platform Stats","default-opened":""},{default:L((()=>[B(K,{pagination:o.value,"onUpdate:pagination":a[0]||(a[0]=e=>o.value=e),columns:v.value?u:n(c),rows:i.value,class:"q-px-md","column-sort-order":"da",ref_key:"platformTable",ref:r,"table-header-class":"table-header","binary-state-sort":"",flat:"","hide-bottom":""},null,8,["pagination","columns","rows"])])),_:1})):T("",!0)}}),pe=864e5,Pe={class:"number-stats-wrapper q-px-md q-mt-sm"},be=H({__name:"NumberStats",setup(e){const l=I(),{filteredData:t,amountTagged:s,dataLength:r,dateRange:o}=E(l),d=ne(),{dataHasSystems:u,dataHasOnlySystems:v}=E(d),c=f((()=>{if(o.value.some((e=>!e)))return 0;const[e,a]=o.value;return(new Date(a).getTime()-new Date(e).getTime())/pe+1})),g=ve((()=>{var e;const a={systems:0,systemsNotTagged:0,allProcName:0,systemsProcName:0,discovererNumber:0,avgDiscoverersPerDay:"0",systemsDuplicates:[]},l=new Set,s={},r={};for(let n=0;n<t.value.length;n++){const o=t.value[n];if("SolarSystem"===o.Category&&a.systems++,!1===o["Correctly Prefixed"]&&o.Name&&a.systemsNotTagged++,"SolarSystem"===o.Category&&!o.Name&&o.Discoverer&&a.systemsProcName++,!o.Name&&o.Discoverer&&a.allProcName++,o.Discoverer){l.add(o.Discoverer);const e=de(o.Timestamp);s[e]??(s[e]=new Set),s[e].add(o.Discoverer)}o.Name&&(r[e=o.Name]??(r[e]=0),r[o.Name]++)}a.discovererNumber=l.size;const n=Object.values(s).map((e=>e.size)).reduce(((e,a)=>e+a),0);return a.avgDiscoverersPerDay=c?(n/c.value).toFixed(2):"0",Object.entries(r).filter((e=>e[1]>1)),a})),{systems:m,systemsNotTagged:y,systemsProcName:p,allProcName:P,discovererNumber:S,avgDiscoverersPerDay:D,systemsDuplicates:N}=ie(g),x=f((()=>b(s.value,m.value))),h=f((()=>b(y.value,m.value))),B=f((()=>b(p.value,m.value))),_=f((()=>b(P.value,r.value))),R=f((()=>c.value?(r.value/c.value).toFixed(2):0)),C=f((()=>c.value?(s.value/c.value).toFixed(2):0)),$=f((()=>c.value?((y.value+p.value)/c.value).toFixed(2):0)),k=e=>e?ce(e):"-";return(e,l)=>(w(),Q(j,{label:"Number Stats","default-opened":""},{default:L((()=>[a("div",Pe,[n(u)?(w(),O(q,{key:0},[l[1]||(l[1]=a("div",null,"Systems correctly named:",-1)),a("div",null,i(n(s))+" ("+i(x.value)+"%)",1),l[2]||(l[2]=a("div",null,"Incorrectly named:",-1)),a("div",null,i(n(y))+" ("+i(h.value)+"%)",1),n(v)?T("",!0):(w(),O(q,{key:0},[l[0]||(l[0]=a("div",null,"Procedural name systems:",-1)),a("div",null,i(n(p))+" ("+i(B.value)+"%)",1)],64))],64)):T("",!0),l[5]||(l[5]=a("div",null,"Procedural name:",-1)),a("div",null,i(n(P))+" ("+i(_.value)+"%)",1),l[6]||(l[6]=a("div",null,"Number of discoverers:",-1)),a("div",null,i(n(S)),1),l[7]||(l[7]=a("div",null,"Average discoveries per day:",-1)),a("div",null,i(R.value),1),l[8]||(l[8]=a("div",null,"Average number of players per day:",-1)),a("div",null,i(n(D)),1),n(u)?(w(),O(q,{key:1},[l[3]||(l[3]=a("div",null,"Average number of prefixes per day:",-1)),a("div",null,i(C.value),1),l[4]||(l[4]=a("div",null,"Average non-prefixed systems per day:",-1)),a("div",null,i($.value),1)],64)):T("",!0),l[9]||(l[9]=a("div",null,"Earliest Discovery:",-1)),a("div",null,i(k(n(o)[0])),1),l[10]||(l[10]=a("div",null,"Latest Discovery:",-1)),a("div",null,i(k(n(o)[1])),1),T("",!0),T("",!0)]),T("",!0)])),_:1}))}}),Se={key:0,class:"column q-gutter-y-lg"},De={class:"column q-px-md q-gutter-y-xl"},Ne={class:"number-stats-wrapper"},_e=5,Be=H({__name:"DiscoveryStats",setup(e){const l=I(),{dataLength:t,isLoading:s}=E(l);return(e,l)=>(w(),Q(me,{condition:!n(s)},{default:L((()=>[n(t)?(w(),O("div",Se,[B(be),B(fe),B(ye)])):T("",!0)])),else:L((()=>[a("div",De,[a("div",Ne,[(w(),O(q,null,ue(10,(e=>B(ge,{width:"200px",type:"text"}))),64))]),B(G),B(G)])])),_:1},8,["condition"]))}});export{Be as default};
